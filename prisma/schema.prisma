generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  password  String   @db.Text
  role      Role     @default(OWNER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NamaBarang {
  id              Int               @id @default(autoincrement())
  idDaftarBarang  String            @unique @db.VarChar(255)
  namaBarang      String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Produk          Produk[]
  PembelianBarang PembelianBarang[]
  PenjualanBarang PenjualanBarang[]
}

model SatuanBarang {
  id         Int      @id @default(autoincrement())
  idSatuan   String   @unique @db.VarChar(255)
  namaSatuan String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Produk     Produk[]
}

model KategoriBarang {
  id           Int      @id @default(autoincrement())
  idKategori   String   @unique @db.VarChar(255)
  namaKategori String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Produk       Produk[]
}

model SupplierBarang {
  id              Int               @id @default(autoincrement())
  idSupplier      String            @unique @db.VarChar(255)
  nama            String            @db.Text
  alamat          String            @db.Text
  noTelepon       String            @db.Text
  noFax           String?
  email           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Produk          Produk[]
  PembelianBarang PembelianBarang[]
}

model Produk {
  id               Int            @id @default(autoincrement())
  idProduk         String         @unique @db.VarChar(255)
  supplier         SupplierBarang @relation(fields: [supplierBarangId], references: [id])
  supplierBarangId Int
  barang           NamaBarang     @relation(fields: [namaBarangId], references: [id])
  namaBarangId     Int
  kategori         KategoriBarang @relation(fields: [kategoriBarangId], references: [id])
  kategoriBarangId Int
  satuan           SatuanBarang   @relation(fields: [satuanBarangId], references: [id])
  satuanBarangId   Int
  keterangan       String?        @db.LongText
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model PembelianBarang {
  id                     Int               @id @default(autoincrement())
  idPembelian            String            @unique @db.VarChar(255)
  kodeTransaksiPembelian String            @unique @db.VarChar(255)
  namaBarang             NamaBarang        @relation(fields: [namaBarangId], references: [id])
  namaBarangId           Int
  tanggalPembelian       DateTime          @default(now())
  supplier               SupplierBarang    @relation(fields: [supplierBarangId], references: [id])
  supplierBarangId       Int
  jumlah                 Int               @default(0)
  biayaPesan             Int               @default(0)
  biayaSimpan            Int               @default(0)
  PenguranganStok        PenguranganStok[]
}

model PenjualanBarang {
  id                     Int               @id @default(autoincrement())
  idPenjualan            String            @unique @db.VarChar(255)
  kodeTransaksiPenjualan String            @unique @db.VarChar(255)
  namaBarang             NamaBarang        @relation(fields: [namaBarangId], references: [id])
  namaBarangId           Int
  tanggalPenjualan       DateTime          @default(now())
  jumlah                 Int               @default(0)
  PenguranganStok        PenguranganStok[]
}

model PenguranganStok {
  id              Int             @id @default(autoincrement())
  penjualanBarang PenjualanBarang @relation(fields: [penjualanId], references: [id])
  penjualanId     Int
  pembelianBarang PembelianBarang @relation(fields: [pembelianId], references: [id])
  pembelianId     Int
  jumlahDiambil   Int
}

enum Role {
  OWNER
  ADMIN
}
